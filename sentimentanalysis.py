# -*- coding: utf-8 -*-
"""SentimentAnalysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b2Bd_ZjfmtuCKH_S7muumMB56xow8hoM
"""

#configuring the path of kaggle.json file
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
print('configuration done')

"""Import Dataset from Kaggle"""

#API to fetch the dataset from Kaggle
!kaggle datasets download -d milobele/sentiment140-dataset-1600000-tweets

#extracting the zip file
from zipfile import ZipFile
dataset='/content/sentiment140-dataset-1600000-tweets.zip'

with ZipFile(dataset, 'r') as zip:
  zip.extractall()
  print('dataset extracted')

"""Importing the dependencies"""

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

#print stopwords in English
print(stopwords.words('english'))

"""Data Processing/Cleaning"""

#loading data from csv file to panda dataframe
twitter_data= pd.read_csv('/content/testdata.manual.2009.06.14.csv', encoding ='ISO-8859-1')

# Number of rows and columns
twitter_data.shape

#printing first 5 rows of dataframe
twitter_data.head()

#naming column dataset
column_names= ['The polarity of the tweet','id of tweet','date of the tweet','query', 'User that tweeted','The content of the tweet']
twitter_data= pd.read_csv('/content/testdata.manual.2009.06.14.csv',names= column_names, encoding ='ISO-8859-1')

twitter_data.shape

twitter_data.head()

#Check for missing values in the dataset
twitter_data.isnull().sum()

#check for target distribution
twitter_data['The polarity of the tweet'].value_counts()

"""Converting target from '4' to '1'"""

twitter_data.replace({'The polarity of the tweet':{4:1}}, inplace= True)
twitter_data.replace({'The polarity of the tweet':{0:-1}}, inplace= True)
twitter_data.replace({'The polarity of the tweet':{2:0}}, inplace= True)

twitter_data['The polarity of the tweet'].value_counts()

"""-1--> Negative
0--> Neutral
1--> Positive

Stemming: The process of reducing a word to its root word
eg. act is root word for actor, acting.
"""

port_stem = PorterStemmer()

def stemming(content):

  stemmed_content= re.sub('[^a-zA-Z]',' ',content)
  stemmed_content= stemmed_content.lower()
  stemmed_content= stemmed_content.split()
  stemmed_content= [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  stemmed_content = ' '.join(stemmed_content)

  return stemmed_content

twitter_data['stemmed_content']= twitter_data['The content of the tweet'].apply(stemming)

twitter_data.head()

print(twitter_data['stemmed_content'])

print(twitter_data['The polarity of the tweet'])

#seperating the data and label

X= twitter_data['stemmed_content'].values
Y= twitter_data['The polarity of the tweet'].values

print(X)

print(Y)

"""Splitting the data to training data and test data"""

X_train, X_test, Y_train, Y_test= train_test_split(X,Y, test_size=0.2, stratify= Y, random_state= 2)

print(X.shape, X_train, X_test.shape)

#feature extraction(converting textual data to numerical data)
vectorizer = TfidfVectorizer()

X_train = vectorizer.fit_transform(X_train)
X_test = vectorizer.transform(X_test)

print(X_train)

print(X_test)

"""Training the Machine Learning Model

Logistic Regression
"""

model= LogisticRegression(max_iter=2000)

model.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

#accuracy score on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy= accuracy_score(Y_train, X_train_prediction)

print('Accuracy score on training data: ', training_data_accuracy)

#accuracy score on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy= accuracy_score(Y_test, X_test_prediction)

print('Accuracy score on training data: ', test_data_accuracy)

"""Model accuracy= 80%

Saving the Trained Model
"""

import pickle

filename= 'trained_model.pkl'
pickle.dump(model, open(filename,'wb'))

"""Model Testing"""

#loading the saved model
loaded_model = pickle.load(open('/content/trained_model.pkl','rb'))

X_new= X_test[15]
print(Y_test[15])

prediction = model.predict(X_new)
print(prediction)

if (prediction[0]==-1):
  print('Negative tweet')

if(prediction[0]==0):
  print('Neutral Tweet')

else:
  print('Positive Tweet')

X_new= X_test[14]
print(Y_test[14])

prediction = model.predict(X_new)
print(prediction)

if (prediction[0]==-1):
  print('Negative tweet')

if(prediction[0]==0):
  print('Neutral Tweet')

else:
  print('Positive Tweet')

